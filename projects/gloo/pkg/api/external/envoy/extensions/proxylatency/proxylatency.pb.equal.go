// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/external/envoy/extensions/proxylatency/proxylatency.proto

package proxylatency

import (
	"errors"
	"fmt"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
)

// Equal function
func (m *ProxyLatency) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ProxyLatency)
	if !ok {
		that2, ok := that.(ProxyLatency)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetRequest() != target.GetRequest() {
		return false
	}

	if m.GetMeasureRequestInternally() != target.GetMeasureRequestInternally() {
		return false
	}

	if m.GetResponse() != target.GetResponse() {
		return false
	}

	if h, ok := interface{}(m.GetChargeClusterStat()).(equality.Equalizer); ok {
		if !h.Equal(target.GetChargeClusterStat()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetChargeClusterStat(), target.GetChargeClusterStat()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetChargeListenerStat()).(equality.Equalizer); ok {
		if !h.Equal(target.GetChargeListenerStat()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetChargeListenerStat(), target.GetChargeListenerStat()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetEmitDynamicMetadata()).(equality.Equalizer); ok {
		if !h.Equal(target.GetEmitDynamicMetadata()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetEmitDynamicMetadata(), target.GetEmitDynamicMetadata()) {
			return false
		}
	}

	return true
}
